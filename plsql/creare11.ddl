-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2024-05-26 10:53:00 EEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE OR REPLACE PACKAGE clienti_pachet IS
    PROCEDURE adauga_client(p_nume IN VARCHAR2, p_prenume IN VARCHAR2, p_adresa IN VARCHAR2, p_email IN VARCHAR2);
    PROCEDURE update_client_adresa(p_id_client IN clienti.id_client%TYPE, p_adresa IN VARCHAR2);
    PROCEDURE update_client_email(p_id_client IN clienti.id_client%TYPE, p_email IN VARCHAR2);
    PROCEDURE sterge_client(p_id_client IN clienti.id_client%TYPE);
END clienti_pachet;
/

CREATE OR REPLACE PACKAGE comenzi_pachet IS
    PROCEDURE adauga_comanda(p_data IN DATE, p_id_client IN clienti.id_client%TYPE, p_produse IN SYS.ODCINUMBERLIST, p_cantitati IN SYS.ODCINUMBERLIST);
    PROCEDURE update_comanda_data(p_idc IN NUMBER, p_data IN DATE);
    PROCEDURE sterge_comanda(p_idc IN NUMBER);
END comenzi_pachet;
/

CREATE OR REPLACE PACKAGE modificari_cantitati_comanda IS
    PROCEDURE update_comanda_cantitate_inPlus(p_idc IN NUMBER, p_produse IN SYS.ODCINUMBERLIST, p_cantitati IN SYS.ODCINUMBERLIST);
    PROCEDURE update_comanda_cantitate_Retur(p_idc IN NUMBER, p_produse IN SYS.ODCINUMBERLIST, p_cantitati IN SYS.ODCINUMBERLIST);
END modificari_cantitati_comanda;
/

CREATE OR REPLACE PACKAGE produs_pachet IS
    PROCEDURE adauga_produs(p_nume IN VARCHAR2, p_categorie IN VARCHAR2,
    p_pret IN NUMBER, p_cantitate IN NUMBER, p_autor VARCHAR2, p_data_pub DATE);
    PROCEDURE update_produs_pret(p_idp IN NUMBER, p_pret IN NUMBER);
    PROCEDURE update_produs_cantitate(p_idp IN NUMBER, p_cantitate IN NUMBER);
    PROCEDURE sterge_produs(p_idp IN NUMBER);

END produs_pachet;
/

CREATE OR REPLACE PACKAGE vizualizare_pachet IS
    FUNCTION vizualizare_clienti RETURN VARCHAR2;
    FUNCTION vizualizare_produse RETURN VARCHAR2;
    PROCEDURE vizualizare_comenzi_si_detalii_client (p_id_client IN clienti.id_client%TYPE);
    PROCEDURE vizualizare_toate_comenzile_si_detaliile;
    PROCEDURE vizualizare_comanda_si_detalii(p_id_comanda IN comenzi.idc%TYPE);
END vizualizare_pachet;
/

CREATE SEQUENCE clienti_seq START WITH 1 INCREMENT BY 1 ORDER;

CREATE SEQUENCE comenzi_details_seq_pack START WITH 1 INCREMENT BY 1 ORDER;

CREATE SEQUENCE comenzi_seq_pack START WITH 1 INCREMENT BY 1 ORDER;

CREATE SEQUENCE produs_seq START WITH 1 INCREMENT BY 1 ORDER;

CREATE TABLE clienti (
    id_client NUMBER NOT NULL,
    nume      VARCHAR2(255),
    prenume   VARCHAR2(255),
    adresa    VARCHAR2(255),
    email     VARCHAR2(255)
)
LOGGING;

ALTER TABLE clienti ADD CONSTRAINT clienti_pk PRIMARY KEY ( id_client );

CREATE TABLE comenzi (
    idc       NUMBER NOT NULL,
    data      DATE,
    id_client NUMBER NOT NULL
)
LOGGING;

ALTER TABLE comenzi ADD CONSTRAINT comenzi_pk PRIMARY KEY ( idc );

CREATE TABLE comenzi_details (
    idcd       NUMBER,
    id_comanda NUMBER NOT NULL,
    id_prod    NUMBER NOT NULL,
    cantitate  NUMBER(3)
)
LOGGING;

CREATE TABLE produs (
    idp       NUMBER NOT NULL,
    nume      VARCHAR2(255),
    categorie VARCHAR2(255),
    pret      NUMBER(3),
    cantitate NUMBER(3)
)
LOGGING;

ALTER TABLE produs ADD CONSTRAINT produs_pk PRIMARY KEY ( idp );

CREATE TABLE produs_details (
    id_prod  NUMBER NOT NULL,
    autor    VARCHAR2(255),
    data_pub DATE
)
LOGGING;

ALTER TABLE produs_details ADD CONSTRAINT produs_details_pk PRIMARY KEY ( id_prod );

ALTER TABLE comenzi
    ADD CONSTRAINT comenzi_clienti_fk FOREIGN KEY ( id_client )
        REFERENCES clienti ( id_client )
    NOT DEFERRABLE;

ALTER TABLE comenzi_details
    ADD CONSTRAINT comenzi_details_comenzi_fk FOREIGN KEY ( id_comanda )
        REFERENCES comenzi ( idc )
    NOT DEFERRABLE;

ALTER TABLE comenzi_details
    ADD CONSTRAINT comenzi_details_produs_fk FOREIGN KEY ( id_prod )
        REFERENCES produs ( idp )
    NOT DEFERRABLE;

ALTER TABLE produs_details
    ADD CONSTRAINT produs_details_produs_fk FOREIGN KEY ( id_prod )
        REFERENCES produs ( idp )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER verifica_comenzi_client 
    BEFORE DELETE ON Clienti 
    FOR EACH ROW 
DECLARE
    v_count NUMBER;
BEGIN
    
    SELECT COUNT(*) INTO v_count
    FROM comenzi
    WHERE id_client = :OLD.id_client;
    
    IF v_count > 0 THEN
       
        RAISE_APPLICATION_ERROR(-20001, 'Clientul are comenzi asociate si nu poate fi sters');
    END IF;
END; 
/

CREATE OR REPLACE TRIGGER verifica_comenzi_produs 
    BEFORE DELETE ON Produs 
    FOR EACH ROW 
DECLARE
    v_count NUMBER;
BEGIN
 
    SELECT COUNT(*) INTO v_count
    FROM comenzi_details
    WHERE id_prod = :OLD.idp;
    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Produsul este asociat cu una sau mai multe comenzi si nu poate fi sters');
    END IF;
END; 
/

CREATE OR REPLACE PACKAGE BODY clienti_pachet IS

    PROCEDURE adauga_client (
        p_nume    IN VARCHAR2,
        p_prenume IN VARCHAR2,
        p_adresa  IN VARCHAR2,
        p_email   IN VARCHAR2
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            clienti
        WHERE
                nume = p_nume
            AND prenume = p_prenume;

        IF v_count > 0 THEN
            raise_application_error(-20002, 'Clientul deja exista');
        END IF;
        INSERT INTO clienti (
            id_client,
            nume,
            prenume,
            adresa,
            email
        ) VALUES (
            clienti_seq.NEXTVAL,
            p_nume,
            p_prenume,
            p_adresa,
            p_email
        );

    END adauga_client;

    PROCEDURE update_client_adresa (
        p_id_client IN clienti.id_client%TYPE,
        p_adresa    IN VARCHAR2
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            clienti
        WHERE
            id_client = p_id_client;

        IF v_count = 0 THEN
            raise_application_error(-20001, 'Clientul cu id-ul dat nu exista');
        END IF;
        UPDATE clienti
        SET
            adresa = p_adresa
        WHERE
            id_client = p_id_client;

    END update_client_adresa;

    PROCEDURE update_client_email (
        p_id_client IN clienti.id_client%TYPE,
        p_email     IN VARCHAR2
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            clienti
        WHERE
            id_client = p_id_client;

        IF v_count = 0 THEN
            raise_application_error(-20001, 'Clientul cu id-ul dat nu exista');
        END IF;
        UPDATE clienti
        SET
            email = p_email
        WHERE
            id_client = p_id_client;

    END update_client_email;

    PROCEDURE sterge_client (
        p_id_client IN clienti.id_client%TYPE
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            clienti
        WHERE
            id_client = p_id_client;

        IF v_count = 0 THEN
            raise_application_error(-20001, 'Clientul cu id-ul dat nu exista');
        END IF;
        DELETE FROM clienti
        WHERE
            id_client = p_id_client;

    END sterge_client;

END clienti_pachet;
/

CREATE OR REPLACE PACKAGE BODY comenzi_pachet IS

    PROCEDURE adauga_comanda (
        p_data      IN DATE,
        p_id_client IN clienti.id_client%TYPE,
        p_produse   IN sys.odcinumberlist,
        p_cantitati IN sys.odcinumberlist
    ) IS
        v_count            NUMBER;
        v_id_comanda       NUMBER;
        v_count2           NUMBER;
        v_cantitate_produs NUMBER;
    BEGIN
        dbms_output.put_line(p_data);
        IF p_data > sysdate THEN
            raise_application_error(-20001, 'Data comenzii nu poate fi din viitor');
        END IF;
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            clienti
        WHERE
            id_client = p_id_client;

        IF v_count = 0 THEN
            raise_application_error(-20001, 'Clientul cu id-ul dat nu exista');
        END IF;
        FOR i IN 1..p_produse.count LOOP
            SELECT
                COUNT(*)
            INTO v_count2
            FROM
                produs
            WHERE
                idp = p_produse(i);

            IF v_count2 = 0 THEN
                raise_application_error(-20002, 'Una sau mai multe produse din lista nu exista');
            ELSE
                SELECT
                    cantitate
                INTO v_cantitate_produs
                FROM
                    produs
                WHERE
                    idp = p_produse(i);

                IF p_cantitati(i) > v_cantitate_produs THEN
                    raise_application_error(-20002, 'Cantitatea pentru produsul cu id-ul '
                                                    || p_produse(i)
                                                    || ' depaseste cantitatea disponibila');
                ELSE
                    UPDATE produs
                    SET
                        cantitate = cantitate - p_cantitati(i)
                    WHERE
                        idp = p_produse(i);

                END IF;

            END IF;

        END LOOP;

        INSERT INTO comenzi (
            idc,
            data,
            id_client
        ) VALUES (
            comenzi_seq_pack.NEXTVAL,
            p_data,
            p_id_client
        ) RETURNING idc INTO v_id_comanda;

        FOR i IN 1..p_produse.count LOOP
            INSERT INTO comenzi_details (
                idcd,
                id_comanda,
                id_prod,
                cantitate
            ) VALUES (
                comenzi_details_seq_pack.NEXTVAL,
                v_id_comanda,
                p_produse(i),
                p_cantitati(i)
            );

        END LOOP;

    END adauga_comanda;

    PROCEDURE update_comanda_data (
        p_idc  IN NUMBER,
        p_data IN DATE
    ) IS
        v_count NUMBER;
    BEGIN
        IF p_data > sysdate THEN
            raise_application_error(-20001, 'Data comenzii nu poate fi din viitor');
        END IF;
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            comenzi
        WHERE
            idc = p_idc;

        IF v_count = 0 THEN
            raise_application_error(-20001, 'Comanda cu id-ul dat nu exista');
        END IF;
        UPDATE comenzi
        SET
            data = p_data
        WHERE
            idc = p_idc;

    END update_comanda_data;

    PROCEDURE sterge_comanda (
        p_idc IN NUMBER
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            comenzi
        WHERE
            idc = p_idc;

        IF v_count = 0 THEN
            raise_application_error(-20001, 'Comanda cu id-ul dat nu exista');
        END IF;
        DELETE FROM comenzi_details
        WHERE
            id_comanda = p_idc;

        DELETE FROM comenzi
        WHERE
            idc = p_idc;

    END sterge_comanda;

END comenzi_pachet;
/

CREATE OR REPLACE PACKAGE BODY modificari_cantitati_comanda IS

    PROCEDURE update_comanda_cantitate_inplus (
        p_idc       IN NUMBER,
        p_produse   IN sys.odcinumberlist,
        p_cantitati IN sys.odcinumberlist
    ) IS

        v_count             NUMBER;
        v_count_inexistente NUMBER := 0;
        v_cantitate         NUMBER;
        v_savepoint_name    VARCHAR2(30) := 'before_update';
    BEGIN
        SAVEPOINT before_update;
        BEGIN
            SELECT
                COUNT(*)
            INTO v_count
            FROM
                comenzi
            WHERE
                idc = p_idc;

            IF v_count = 0 THEN
                raise_application_error(-20001, 'Comanda cu id-ul dat nu exista');
            END IF;
            FOR i IN 1..p_produse.count LOOP
                SELECT
                    COUNT(*)
                INTO v_count
                FROM
                    comenzi_details
                WHERE
                        id_comanda = p_idc
                    AND id_prod = p_produse(i);

                IF v_count = 0 THEN
                    v_count_inexistente := v_count_inexistente + 1;
                END IF;
            END LOOP;

            IF v_count_inexistente > 0 THEN
                raise_application_error(-20002, 'Una sau mai multe produse din lista nu exista');
            END IF;
            FOR i IN 1..p_produse.count LOOP
                SELECT
                    cantitate
                INTO v_cantitate
                FROM
                    produs
                WHERE
                    idp = p_produse(i);

                IF p_cantitati(i) > v_cantitate THEN
                    raise_application_error(-20003, 'Cantitatea solicitata pentru produsul '
                                                    || p_produse(i)
                                                    || ' depaseste stocul disponibil');
                END IF;

                UPDATE produs
                SET
                    cantitate = cantitate - p_cantitati(i)
                WHERE
                    idp = p_produse(i);

                UPDATE comenzi_details
                SET
                    cantitate = cantitate + p_cantitati(i)
                WHERE
                        id_comanda = p_idc
                    AND id_prod = p_produse(i);

            END LOOP;

            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK TO before_update;
                RAISE;
        END;

    END update_comanda_cantitate_inplus;

    PROCEDURE update_comanda_cantitate_retur (
        p_idc       IN NUMBER,
        p_produse   IN sys.odcinumberlist,
        p_cantitati IN sys.odcinumberlist
    ) IS

        v_count             NUMBER;
        v_count_inexistente NUMBER := 0;
        v_cantitate         NUMBER;
        v_savepoint_name    VARCHAR2(30) := 'before_update';
    BEGIN
        SAVEPOINT before_update;
        BEGIN
            SELECT
                COUNT(*)
            INTO v_count
            FROM
                comenzi
            WHERE
                idc = p_idc;

            IF v_count = 0 THEN
                raise_application_error(-20001, 'Comanda cu id-ul dat nu exista');
            END IF;
            FOR i IN 1..p_produse.count LOOP
                SELECT
                    COUNT(*)
                INTO v_count
                FROM
                    comenzi_details
                WHERE
                        id_comanda = p_idc
                    AND id_prod = p_produse(i);

                IF v_count = 0 THEN
                    v_count_inexistente := v_count_inexistente + 1;
                END IF;
            END LOOP;

            IF v_count_inexistente > 0 THEN
                raise_application_error(-20002, 'Una sau mai multe produse din lista nu exista');
            END IF;
            FOR i IN 1..p_produse.count LOOP
                SELECT
                    cantitate
                INTO v_cantitate
                FROM
                    comenzi_details
                WHERE
                        id_comanda = p_idc
                    AND id_prod = p_produse(i);

                IF p_cantitati(i) > v_cantitate THEN
                    raise_application_error(-20003, 'Cantitatea de retur pentru produsul '
                                                    || p_produse(i)
                                                    || ' depaseste cantitatea initiala');
                END IF;

                UPDATE produs
                SET
                    cantitate = cantitate + p_cantitati(i)
                WHERE
                    idp = p_produse(i);

                UPDATE comenzi_details
                SET
                    cantitate = cantitate - p_cantitati(i)
                WHERE
                        id_comanda = p_idc
                    AND id_prod = p_produse(i);

            END LOOP;

            COMMIT;
        EXCEPTION
            WHEN OTHERS THEN
                ROLLBACK TO before_update;
                RAISE;
        END;

    END update_comanda_cantitate_retur;

END modificari_cantitati_comanda;
/

CREATE OR REPLACE PACKAGE BODY produs_pachet IS

    PROCEDURE adauga_produs (
        p_nume      IN VARCHAR2,
        p_categorie IN VARCHAR2,
        p_pret      IN NUMBER,
        p_cantitate IN NUMBER,
        p_autor     VARCHAR2,
        p_data_pub  DATE
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            produs
        WHERE
                nume = p_nume
            AND categorie = p_categorie;

        IF v_count > 0 THEN
            raise_application_error(-20002, 'Produsul deja exista');
        END IF;
        INSERT INTO produs (
            idp,
            nume,
            categorie,
            pret,
            cantitate
        ) VALUES (
            produs_seq.NEXTVAL,
            p_nume,
            p_categorie,
            p_pret,
            p_cantitate
        );

        INSERT INTO produs_details (
            id_prod,
            autor,
            data_pub
        ) VALUES (
            produs_seq.CURRVAL,
            p_autor,
            p_data_pub
        );

    END adauga_produs;

    PROCEDURE update_produs_pret (
        p_idp  IN NUMBER,
        p_pret IN NUMBER
    ) IS
        v_count    NUMBER;
        v_old_pret NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            produs
        WHERE
            idp = p_idp;

        IF v_count = 0 THEN
            raise_application_error(-20001, 'Produsul cu id-ul dat nu exista');
        END IF;
        SELECT
            pret
        INTO v_old_pret
        FROM
            produs
        WHERE
            idp = p_idp;

        IF v_old_pret != p_pret THEN
            UPDATE produs
            SET
                pret = p_pret
            WHERE
                idp = p_idp;

        END IF;

    END update_produs_pret;

    PROCEDURE update_produs_cantitate (
        p_idp       IN NUMBER,
        p_cantitate IN NUMBER
    ) IS
        v_count         NUMBER;
        v_old_cantitate NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            produs
        WHERE
            idp = p_idp;

        IF v_count = 0 THEN
            raise_application_error(-20001, 'Produsul cu id-ul dat nu exista');
        END IF;
        SELECT
            cantitate
        INTO v_old_cantitate
        FROM
            produs
        WHERE
            idp = p_idp;

        IF v_old_cantitate != p_cantitate THEN
            UPDATE produs
            SET
                cantitate = p_cantitate
            WHERE
                idp = p_idp;

        END IF;

    END update_produs_cantitate;

    PROCEDURE sterge_produs (
        p_idp IN NUMBER
    ) IS
        v_count  NUMBER;
        v_count2 NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            produs
        WHERE
            idp = p_idp;

        IF v_count = 0 THEN
            raise_application_error(-20001, 'Produsul cu id-ul dat nu exista');
        END IF;
        dbms_output.put_line(v_count);
        DELETE FROM produs_details
        WHERE
            id_prod = p_idp;

        DELETE FROM produs
        WHERE
            idp = p_idp;

    END sterge_produs;

END produs_pachet;
/

CREATE OR REPLACE PACKAGE BODY vizualizare_pachet IS

    FUNCTION vizualizare_clienti RETURN VARCHAR2 IS

        v_result  VARCHAR2(32767);
        CURSOR c_clienti IS
        SELECT
            id_client,
            nume,
            prenume,
            adresa,
            email
        FROM
            clienti
        ORDER BY
            id_client;

        r_clienti c_clienti%rowtype;
    BEGIN
        v_result := '';
        OPEN c_clienti;
        LOOP
            FETCH c_clienti INTO r_clienti;
            EXIT WHEN c_clienti%notfound;
            v_result := v_result
                        || 'ID: '
                        || r_clienti.id_client
                        || ', nume: '
                        || r_clienti.nume
                        || ', prenume: '
                        || r_clienti.prenume
                        || ', adresa: '
                        || r_clienti.adresa
                        || ', email: '
                        || r_clienti.email
                        || chr(10);

        END LOOP;

        CLOSE c_clienti;
        RETURN v_result;
    END vizualizare_clienti;

    FUNCTION vizualizare_produse RETURN VARCHAR2 IS

        v_result  VARCHAR2(32767);
        CURSOR c_produse IS
        SELECT
            p.idp,
            p.nume,
            p.categorie,
            p.pret,
            p.cantitate,
            d.autor,
            d.data_pub
        FROM
            produs         p
            LEFT JOIN produs_details d ON p.idp = d.id_prod
        ORDER BY
            p.idp;

        r_produse c_produse%rowtype;
    BEGIN
        v_result := '';
        OPEN c_produse;
        LOOP
            FETCH c_produse INTO r_produse;
            EXIT WHEN c_produse%notfound;
            v_result := v_result
                        || 'ID: '
                        || r_produse.idp
                        || ', nume: '
                        || r_produse.nume
                        || ', categorie: '
                        || r_produse.categorie
                        || ', pret: '
                        || r_produse.pret
                        || ', cantitate: '
                        || r_produse.cantitate
                        || ', autor: '
                        || r_produse.autor
                        || ', data publicarii: '
                        || r_produse.data_pub
                        || chr(10);

        END LOOP;

        CLOSE c_produse;
        RETURN v_result;
    END vizualizare_produse;

    PROCEDURE vizualizare_comenzi_si_detalii_client (
        p_id_client IN clienti.id_client%TYPE
    ) IS
        v_nume_client    VARCHAR2(255);
        v_prenume_client VARCHAR2(255);
        v_count          NUMBER;
        v_count2         NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count2
        FROM
            clienti
        WHERE
            id_client = p_id_client;

        IF v_count2 = 0 THEN
            raise_application_error(-20001, 'Clientul cu id-ul dat nu exista');
        END IF;
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            comenzi
        WHERE
            id_client = p_id_client;

        IF v_count = 0 THEN
            raise_application_error(-20001, 'Clientul cu id-ul dat nu are comezi');
        END IF;
        SELECT
            nume,
            prenume
        INTO
            v_nume_client,
            v_prenume_client
        FROM
            clienti
        WHERE
            id_client = p_id_client;

        FOR comanda IN (
            SELECT
                *
            FROM
                comenzi
            WHERE
                id_client = p_id_client
            ORDER BY
                idc
        ) LOOP
            dbms_output.put_line('ID Comanda: '
                                 || comanda.idc
                                 || ', data: '
                                 || comanda.data
                                 || ', ID client: '
                                 || comanda.id_client
                                 || '  '
                                 || v_nume_client
                                 || ' '
                                 || v_prenume_client);

            FOR detaliu IN (
                SELECT
                    cd.*,
                    p.nume
                FROM
                         comenzi_details cd
                    JOIN produs p ON cd.id_prod = p.idp
                WHERE
                    cd.id_comanda = comanda.idc
                ORDER BY
                    cd.idcd
            ) LOOP
                dbms_output.put_line('ID produs: '
                                     || detaliu.id_prod
                                     || ', nume produs: '
                                     || detaliu.nume
                                     || ', cantitate: '
                                     || detaliu.cantitate);
            END LOOP;

        END LOOP;

        dbms_output.put_line(chr(10));
    END vizualizare_comenzi_si_detalii_client;

    PROCEDURE vizualizare_toate_comenzile_si_detaliile IS
    BEGIN
        FOR comanda IN (
            SELECT
                *
            FROM
                comenzi
            ORDER BY
                idc
        ) LOOP
            dbms_output.put_line('ID comanda: '
                                 || comanda.idc
                                 || ', data: '
                                 || comanda.data
                                 || ', ID client: '
                                 || comanda.id_client);

            FOR detaliu IN (
                SELECT
                    cd.*,
                    p.nume
                FROM
                         comenzi_details cd
                    JOIN produs p ON cd.id_prod = p.idp
                WHERE
                    cd.id_comanda = comanda.idc
                ORDER BY
                    cd.idcd
            ) LOOP
                dbms_output.put_line('ID produs: '
                                     || detaliu.id_prod
                                     || ', nume produs: '
                                     || detaliu.nume
                                     || ', cantitate: '
                                     || detaliu.cantitate);
            END LOOP;

        END LOOP;

        dbms_output.put_line(chr(10));
    END vizualizare_toate_comenzile_si_detaliile;

    PROCEDURE vizualizare_comanda_si_detalii (
        p_id_comanda IN comenzi.idc%TYPE
    ) IS
        v_count NUMBER;
    BEGIN
        SELECT
            COUNT(*)
        INTO v_count
        FROM
            comenzi
        WHERE
            idc = p_id_comanda;

        IF v_count = 0 THEN
            raise_application_error(-20001, 'Comanda cu ID-ul dat nu exista');
        END IF;
        FOR comanda IN (
            SELECT
                *
            FROM
                comenzi
            WHERE
                idc = p_id_comanda
        ) LOOP
            dbms_output.put_line('ID comanda: '
                                 || comanda.idc
                                 || ', data: '
                                 || comanda.data
                                 || ', ID client: '
                                 || comanda.id_client);
        END LOOP;

        FOR detaliu IN (
            SELECT
                cd.*,
                p.nume
            FROM
                     comenzi_details cd
                JOIN produs p ON cd.id_prod = p.idp
            WHERE
                cd.id_comanda = p_id_comanda
            ORDER BY
                cd.idcd
        ) LOOP
            dbms_output.put_line('ID produs: '
                                 || detaliu.id_prod
                                 || ', nume produs: '
                                 || detaliu.nume
                                 || ', cantitate: '
                                 || detaliu.cantitate);
        END LOOP;

        dbms_output.put_line(chr(10));
    END vizualizare_comanda_si_detalii;

END vizualizare_pachet;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             5
-- CREATE INDEX                             0
-- ALTER TABLE                              8
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           5
-- CREATE PACKAGE BODY                      5
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           2
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          4
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
